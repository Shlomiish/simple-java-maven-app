name: Master Pipeline
# Define the name of the pipeline

on:
  push:    
    branches:
      - master
      # Trigger the pipeline on push events to the 'master' branch.

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest
    # Define a job named 'build-test-deploy' that runs on the latest Ubuntu runner.

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        # Checkout the repository code using the 'actions/checkout' action.

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
        # Set up Java Development Kit (JDK) version 17 using the 'actions/setup-java' action.

      - name: Install Maven 3.9.2
        run: |
          wget https://archive.apache.org/dist/maven/maven-3/3.9.2/binaries/apache-maven-3.9.2-bin.tar.gz
          tar -xzf apache-maven-3.9.2-bin.tar.gz
          sudo mv apache-maven-3.9.2 /usr/local/apache-maven
          sudo rm -f /usr/bin/mvn
          sudo ln -s /usr/local/apache-maven/bin/mvn /usr/bin/mvn
        # Download, extract, and install Maven 3.9.2.
        # Create a symbolic link to make Maven accessible globally.

      - name: Verify Maven version
        run: mvn -v
        # Verify the installed Maven version to ensure it is set up correctly.

      - name: Build with Maven
        run: mvn clean install
        # Run the Maven build with 'clean' and 'install' goals:
        # 'clean' removes previous build artifacts.
        # 'install' compiles, tests, packages, and installs the code into the local repository.

      - name: Run JUnit tests
        run: mvn test
        # Run the JUnit tests using Maven.

      - name: Update version
        run: |
          chmod +x update_version.sh
          ./update_version.sh
          VERSION=$(tail -n 1 version.txt)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
        # Run a script to update the version number.
        # Store the new version number in the GitHub Actions environment variable.

      - name: Commit and push updated version.txt
        run: |
          git config user.name ${{ secrets.GIT_USERNAME }}
          git config user.email ${{ secrets.EMAIL }}
          git add version.txt
          git commit -m "Update version.txt with new version"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # Commit and push the updated 'version.txt' file with the new version number.
        # Use GitHub secrets for authentication.

      - name: Build Docker image
        if: success()  # Only run if the previous steps succeeded.
        run: |
          docker build -t shlomi00212/java_hello-world_app:${{ env.VERSION }} .
          docker tag shlomi00212/java_hello-world_app:${{ env.VERSION }} shlomi00212/java_hello-world_app:latest
        # Build a Docker image with the updated version and tag it as 'latest'.

      - name: Log in to Docker Hub
        if: success()  # Only run if the previous steps succeeded.
        run: echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login --username "${{ secrets.DOCKER_USERNAME }}" --password-stdin
        # Log in to Docker Hub using the provided credentials from secrets.

      - name: Push Docker image
        if: success()  # Only run if the previous steps succeeded.
        run: |
          docker push shlomi00212/java_hello-world_app:${{ env.VERSION }}
          docker push shlomi00212/java_hello-world_app:latest
        # Push the Docker images (both versioned and 'latest') to Docker Hub.

      - name: Deploy to EC2
        if: success()  # Only run if the previous steps succeeded.
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.EC2_INSTANCE_REGION }}
          EC2_INSTANCE_ID: ${{ secrets.EC2_INSTANCE_ID }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}
        run: |
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set default.region $AWS_DEFAULT_REGION

          aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --targets "Key=instanceIds,Values=$EC2_INSTANCE_ID" \
            --parameters '{
              "commands": [
                "echo \"${DOCKER_HUB_TOKEN}\" | docker login --username \"${DOCKER_USERNAME}\" --password-stdin",
                "sudo docker stop $(sudo docker ps -q)",
                "sudo docker rm $(sudo docker ps -a -q)",
                "docker image prune -a --force",
                "sudo docker pull shlomi00212/java_hello-world_app:latest",
                "sudo docker run -d --name myapp shlomi00212/java_hello-world_app:latest"
              ]
            }'
        # Configure AWS CLI with provided credentials and region.
        # Use AWS SSM to run a shell script on the specified EC2 instance:
        # - Log in to Docker Hub.
        # - Stop and remove any running Docker containers.
        # - Prune Docker images to free up space.
        # - Pull the latest Docker image from Docker Hub.
        # - Run the Docker container with the new image.
