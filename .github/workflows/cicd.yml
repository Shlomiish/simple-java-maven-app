# This is a GitHub Actions workflow file.
name: Java Docker Build, Test, and Deploy

# This specifies when the workflow should be triggered
on:
  # Trigger the workflow on push events to the master branch
  push:
    branches:
      - master

# Define the jobs that will run as part of this workflow
jobs:
  # Define a job named 'build-test-deploy'
  build-test-deploy:
    # Use the latest Ubuntu runner provided by GitHub
    runs-on: ubuntu-latest

    # Steps define the sequence of tasks to be executed in the job
    steps:
      # Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # Install Maven 3.9.2 manually
      - name: Install Maven 3.9.2
        run: |
          wget https://archive.apache.org/dist/maven/maven-3/3.9.2/binaries/apache-maven-3.9.2-bin.tar.gz
          tar -xzf apache-maven-3.9.2-bin.tar.gz
          sudo mv apache-maven-3.9.2 /usr/local/apache-maven
          # Remove existing symbolic link if it exists
          sudo rm -f /usr/bin/mvn
          # Create a new symbolic link
          sudo ln -s /usr/local/apache-maven/bin/mvn /usr/bin/mvn

      # Verify Maven version
      - name: Verify Maven version
        run: mvn -v

      # Build the project with Maven
      - name: Build with Maven
        run: mvn clean install

      # Run JUnit tests with Maven
      - name: Run JUnit tests
        run: mvn test

      # Increment Maven project version
      - name: Increment Maven Version
        if: success()
        run: mvn versions:set -DnewVersion=1.0.${{ github.run_number }}
        env:
          MAVEN_OPTS: '-Xmx2g'

      # Build the Docker image only if tests pass
      - name: Build Docker image
        if: success()
        run: docker build -t shlomi00212/java_hello-world_app:1.0.${{ github.run_number }} .

      # Log in to Docker Hub using the token
      - name: Log in to Docker Hub
        if: success()
        run: echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login --username "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # Push the Docker image to Docker Hub only if the login was successful
      - name: Push Docker image
        if: success()
        run: docker push shlomi00212/java_hello-world_app:1.0.${{ github.run_number }}

      # Deploy Docker image to EC2 instance
      - name: Deploy to EC2
        if: success()
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.EC2_INSTANCE_REGION }}
          EC2_INSTANCE_ID: ${{ secrets.EC2_INSTANCE_ID }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}
        run: |
          # Configure AWS CLI
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set default.region $AWS_DEFAULT_REGION

          # Verify configuration
          aws configure list

          # Send command to EC2 instance via SSM
          aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --targets "Key=instanceIds,Values=$EC2_INSTANCE_ID" \
            --parameters '{
              "commands": [
                "echo \"${DOCKER_HUB_TOKEN}\" | docker login --username \"${DOCKER_USERNAME}\" --password-stdin",
                "sudo docker pull shlomi00212/java_hello-world_app:1.0.${{ github.run_number }}",
                "sudo docker stop myapp || true",
                "sudo docker rm myapp || true",
                "sudo docker run -d --name myapp shlomi00212/java_hello-world_app:1.0.${{ github.run_number }}"
              ]
            }'
